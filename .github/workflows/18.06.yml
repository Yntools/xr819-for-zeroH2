name: Build OpenWrt 18.06 for Orange Pi Zero H2+

on:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/melsem/openwrt-18.06.4
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DEVICE: sun8i-h2-plus-orangepi-zero
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: false
  TZ: UTC
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Show System Info
      run: |
        echo "Build started at: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "CPU info:"
        cat /proc/cpuinfo | grep 'model name' | uniq
        echo "Memory info:"
        free -h
        echo "Disk info:"
        df -h

    - name: Free Disk Space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo apt-get clean
        df -h

    - name: Initialize Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential ccache ecj fastjar file g++ gawk \
        gettext git java-propose-classpath libelf-dev libncurses5-dev \
        libncursesw5-dev libssl-dev python python2.7-dev python3 unzip wget \
        python3-distutils python3-setuptools rsync subversion swig time \
        xsltproc zlib1g-dev
        sudo timedatectl set-timezone "$TZ"

    - name: Clone OpenWrt Source
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt

    - name: Configure Git for Authentication
      run: |
        git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

    - name: Cache Downloads
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-
        max-size: 5GB

    - name: Cache CCACHE
      uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ${{ runner.os }}-ccache-${{ hashFiles('openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-ccache-
        max-size: 2GB

    - name: Setup CCACHE
      run: |
        mkdir -p ~/.ccache
        echo "max_size = 2G" > ~/.ccache/ccache.conf
        echo "hash_dir = false" >> ~/.ccache/ccache.conf
        echo "compression = true" >> ~/.ccache/ccache.conf
        echo "compression_level = 9" >> ~/.ccache/ccache.conf

    - name: Create Default Config
      run: |
        cd openwrt
        cat > .config <<'EOF'
        CONFIG_TARGET_sunxi=y
        CONFIG_TARGET_sunxi_cortexa7=y
        CONFIG_TARGET_sunxi_cortexa7_DEVICE_sun8i-h2-plus-orangepi-zero=y
        CONFIG_PACKAGE_kmod-xradio=y
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-gpio-button-hotplug=y
        CONFIG_PACKAGE_kmod-usb-net=y
        CONFIG_PACKAGE_kmod-usb-net-cdc-ether=y
        CONFIG_PACKAGE_kmod-usb-net-rndis=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        CONFIG_PACKAGE_wireless-regdb=y
        CONFIG_PACKAGE_wpad-mini=y
        CONFIG_PACKAGE_kmod-mac80211=y
        CONFIG_PACKAGE_kmod-sound-core=y
        CONFIG_PACKAGE_kmod-sound-soc-sun4i-codec=y
        CONFIG_PACKAGE_kmod-sound-soc-sun8i-codec=y
        CONFIG_PACKAGE_kmod-sound-soc-sun8i-codec-analog=y
        EOF
        
        # Update feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # Make config
        make defconfig

    - name: Setup XRadio Driver
      run: |
        cd openwrt
        mkdir -p package/kernel/xradio
        wget -O package/kernel/xradio/Makefile https://raw.githubusercontent.com/melsem/openwrt-18.06.4/master/package/kernel/xradio/Makefile

    - name: Download Package Sources
      id: package
      run: |
        cd openwrt
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build Firmware
      id: build
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check Space Usage
      if: (!cancelled())
      run: df -hT

    - name: Organize Files
      id: organize
      if: steps.build.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "Build date: $(date '+%Y-%m-%d %H:%M:%S')" > BUILD_INFO.txt
        echo "Built by: ${{ github.actor }}" >> BUILD_INFO.txt
        echo "Commit: ${{ github.sha }}" >> BUILD_INFO.txt
        echo "OpenWrt version: ${{ env.REPO_BRANCH }}" >> BUILD_INFO.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
        retention-days: 90

    - name: Generate Release Tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload to Release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*