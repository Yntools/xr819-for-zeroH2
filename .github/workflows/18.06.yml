name: Build OpenWrt for Orange Pi Zero

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REPO_URL: https://github.com/melsem/openwrt-18.06.4
  REPO_BRANCH: master
  TZ: UTC

jobs:
  build:
    runs-on: ubuntu-18.04
    permissions:
      contents: read
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Environment
      shell: bash
      run: |
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "ARTIFACT_NAME=openwrt-orangepizero-$(date +%Y%m%d)" >> $GITHUB_ENV

    - name: Initialize Build Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff -a
        sudo rm -rf /etc/apt/sources.list.d/*
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Free Disk Space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"

    - name: Clone Source Code
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        
    - name: Update & Install Feeds
      working-directory: openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Generate Configuration
      working-directory: openwrt
      run: |
        cat > .config <<'EOF'
        CONFIG_TARGET_sunxi=y
        CONFIG_TARGET_sunxi_cortexa7=y
        CONFIG_TARGET_sunxi_cortexa7_DEVICE_sun8i-h2-plus-orangepi-zero=y
        
        # System
        CONFIG_PACKAGE_block-mount=y
        CONFIG_PACKAGE_default-settings=y
        CONFIG_PACKAGE_kmod-gpio-button-hotplug=y
        CONFIG_PACKAGE_uboot-sunxi-orangepi_zero=y
        CONFIG_PACKAGE_autocore=y
        CONFIG_CLEAN_IPKG=y
        
        # WiFi
        CONFIG_PACKAGE_kmod-xradio=y
        CONFIG_PACKAGE_wireless-tools=y
        CONFIG_PACKAGE_wpad-mini=y
        CONFIG_PACKAGE_hostapd-common=y
        CONFIG_PACKAGE_iw=y
        
        # USB Support
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb-ohci=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        CONFIG_PACKAGE_kmod-usb-storage-extras=y
        CONFIG_PACKAGE_kmod-gpio-vbus=y
        
        # Basic packages
        CONFIG_PACKAGE_wget=y
        CONFIG_PACKAGE_curl=y
        CONFIG_PACKAGE_htop=y
        CONFIG_PACKAGE_nano=y
        CONFIG_PACKAGE_iperf3=y
        CONFIG_PACKAGE_irqbalance=y
        CONFIG_PACKAGE_openssh-sftp-server=y
        
        # File System
        CONFIG_PACKAGE_kmod-fs-ext4=y
        CONFIG_PACKAGE_kmod-fs-vfat=y
        CONFIG_PACKAGE_kmod-fs-exfat=y
        CONFIG_PACKAGE_ntfs-3g=y
        
        # Network
        CONFIG_PACKAGE_ip-full=y
        CONFIG_PACKAGE_iptables=y
        CONFIG_PACKAGE_dnsmasq-full=y
        CONFIG_PACKAGE_ipset=y
        
        # Optimizations
        CONFIG_DEVEL=y
        CONFIG_TOOLCHAINOPTS=y
        CONFIG_GCC_USE_VERSION_8=y
        CONFIG_USE_GC_SECTIONS=y
        CONFIG_USE_LTO=y
        CONFIG_TARGET_OPTIMIZATION="-O3 -pipe -mcpu=cortex-a7 -mfpu=neon-vfpv4"
        CONFIG_EXTRA_OPTIMIZATION="-fno-caller-saves -fno-plt"
        
        # Remove unnecessary
        # CONFIG_PACKAGE_kmod-video-core is not set
        # CONFIG_PACKAGE_kmod-video-uvc is not set
        # CONFIG_PACKAGE_mjpg-streamer is not set
        EOF
        
        make defconfig

    - name: Cache Downloads
      uses: actions/cache@v3
      with:
        path: openwrt/dl
        key: ${{ runner.os }}-openwrt-dl-${{ hashFiles('openwrt/.config') }}
        restore-keys: |
          ${{ runner.os }}-openwrt-dl-

    - name: Download Package Sources
      working-directory: openwrt
      run: |
        make download -j8
        find dl -size -1024c -exec rm -f {} \;

    - name: Build Firmware
      working-directory: openwrt
      run: |
        echo "::group::Build Output"
        make -j$(nproc) || make -j1 V=s
        echo "::endgroup::"
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV

    - name: Check Space Usage
      if: always()
      run: df -hT

    - name: Organize Files
      if: success()
      working-directory: openwrt
      run: |
        cd bin/targets/sunxi/cortexa7/
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload Firmware
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.FIRMWARE }}/*
        retention-days: 7
        if-no-files-found: error

    - name: Generate Release Tag
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "RELEASE_TAG=orangepizero_$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: Create Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        files: ${{ env.FIRMWARE }}/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}